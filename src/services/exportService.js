/**
 * Export Service for PT SOAP Generator
 * Handles PDF and text export functionality for SOAP notes
 * Clean, professional formatting following medical documentation standards
 */

import jsPDF from 'jspdf';

/**
 * Export SOAP note as PDF
 * @param {Object} soapData - Structured SOAP data
 * @param {Object} sessionInfo - Session metadata
 * @returns {Promise<void>}
 */
export const exportToPDF = async (soapData, sessionInfo = {}) => {
  try {
    const pdf = new jsPDF();
    let yPosition = 20;
    const pageWidth = pdf.internal.pageSize.getWidth();
    const margin = 20;
    const contentWidth = pageWidth - (margin * 2);

    // Helper function to add text with word wrapping
    const addWrappedText = (text, x, y, maxWidth, fontSize = 12) => {
      pdf.setFontSize(fontSize);
      const lines = pdf.splitTextToSize(text, maxWidth);
      pdf.text(lines, x, y);
      return y + (lines.length * (fontSize * 0.5));
    };

    // Header
    pdf.setFontSize(18);
    pdf.setFont(undefined, 'bold');
    pdf.text('Physical Therapy SOAP Note', margin, yPosition);
    yPosition += 15;

    // Session Info
    pdf.setFontSize(10);
    pdf.setFont(undefined, 'normal');
    const sessionDate = new Date().toLocaleDateString();
    pdf.text(`Date: ${sessionDate}`, margin, yPosition);
    if (sessionInfo.sessionNumber) {
      pdf.text(`Session #: ${sessionInfo.sessionNumber}`, margin + 100, yPosition);
    }
    if (sessionInfo.templateType) {
      pdf.text(`Template: ${sessionInfo.templateType}`, margin + 180, yPosition);
    }
    yPosition += 20;

    // SUBJECTIVE Section
    if (soapData.subjective?.content) {
      pdf.setFontSize(14);
      pdf.setFont(undefined, 'bold');
      pdf.text('SUBJECTIVE', margin, yPosition);
      yPosition += 10;

      pdf.setFontSize(11);
      pdf.setFont(undefined, 'normal');
      const subjectiveText = stripHtml(soapData.subjective.content);
      yPosition = addWrappedText(subjectiveText, margin, yPosition, contentWidth, 11);
      yPosition += 15;
    }

    // OBJECTIVE Section
    if (soapData.objective?.rows?.length > 0) {
      pdf.setFontSize(14);
      pdf.setFont(undefined, 'bold');
      pdf.text('OBJECTIVE', margin, yPosition);
      yPosition += 10;

      // Table headers
      pdf.setFontSize(10);
      pdf.setFont(undefined, 'bold');
      pdf.text('Test/Measurement', margin, yPosition);
      pdf.text('Result', margin + 80, yPosition);
      pdf.text('Notes', margin + 130, yPosition);
      yPosition += 8;

      // Draw header line
      pdf.line(margin, yPosition - 2, pageWidth - margin, yPosition - 2);
      yPosition += 5;

      // Table rows
      pdf.setFont(undefined, 'normal');
      soapData.objective.rows.forEach(row => {
        if (row.test || row.result || row.notes) {
          // Check if we need a new page
          if (yPosition > 250) {
            pdf.addPage();
            yPosition = 20;
          }

          pdf.text(row.test || '', margin, yPosition);
          pdf.text(row.result || '', margin + 80, yPosition);
          
          // Handle long notes with wrapping
          if (row.notes) {
            const noteLines = pdf.splitTextToSize(row.notes, 60);
            pdf.text(noteLines, margin + 130, yPosition);
            yPosition += Math.max(8, noteLines.length * 4);
          } else {
            yPosition += 8;
          }
        }
      });
      yPosition += 10;
    }

    // ASSESSMENT Section
    if (soapData.assessment?.content) {
      // Check if we need a new page
      if (yPosition > 220) {
        pdf.addPage();
        yPosition = 20;
      }

      pdf.setFontSize(14);
      pdf.setFont(undefined, 'bold');
      pdf.text('ASSESSMENT', margin, yPosition);
      yPosition += 10;

      pdf.setFontSize(11);
      pdf.setFont(undefined, 'normal');
      const assessmentText = stripHtml(soapData.assessment.content);
      yPosition = addWrappedText(assessmentText, margin, yPosition, contentWidth, 11);
      yPosition += 15;
    }

    // PLAN Section
    if (soapData.plan?.content) {
      // Check if we need a new page
      if (yPosition > 220) {
        pdf.addPage();
        yPosition = 20;
      }

      pdf.setFontSize(14);
      pdf.setFont(undefined, 'bold');
      pdf.text('PLAN', margin, yPosition);
      yPosition += 10;

      pdf.setFontSize(11);
      pdf.setFont(undefined, 'normal');
      const planText = stripHtml(soapData.plan.content);
      yPosition = addWrappedText(planText, margin, yPosition, contentWidth, 11);
    }

    // Footer
    const pageCount = pdf.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.setFont(undefined, 'normal');
      pdf.text(`Generated by PT SOAP Generator - Page ${i} of ${pageCount}`, 
        margin, pdf.internal.pageSize.getHeight() - 10);
    }

    // Generate filename
    const filename = `SOAP_Note_${sessionInfo.sessionNumber || 'New'}_${sessionDate.replace(/\//g, '-')}.pdf`;
    
    // Save the PDF
    pdf.save(filename);

    return { success: true, filename };

  } catch (error) {
    console.error('PDF export failed:', error);
    throw new Error(`PDF export failed: ${error.message}`);
  }
};

/**
 * Export SOAP note as formatted text
 * @param {Object} soapData - Structured SOAP data
 * @param {Object} sessionInfo - Session metadata
 * @returns {string} - Formatted text content
 */
export const exportToText = (soapData, sessionInfo = {}) => {
  let text = '';
  const separator = '=' .repeat(60);
  
  // Header
  text += 'PHYSICAL THERAPY SOAP NOTE\n';
  text += separator + '\n';
  text += `Date: ${new Date().toLocaleDateString()}\n`;
  if (sessionInfo.sessionNumber) {
    text += `Session #: ${sessionInfo.sessionNumber}\n`;
  }
  if (sessionInfo.templateType) {
    text += `Template: ${sessionInfo.templateType.toUpperCase()}\n`;
  }
  text += '\n';

  // SUBJECTIVE
  if (soapData.subjective?.content) {
    text += 'SUBJECTIVE:\n';
    text += '-'.repeat(20) + '\n';
    text += stripHtml(soapData.subjective.content) + '\n\n';
  }

  // OBJECTIVE
  if (soapData.objective?.rows?.length > 0) {
    text += 'OBJECTIVE:\n';
    text += '-'.repeat(20) + '\n';
    
    soapData.objective.rows.forEach(row => {
      if (row.test || row.result || row.notes) {
        text += `${row.test || 'N/A'}: ${row.result || 'N/A'}`;
        if (row.notes) {
          text += ` (${row.notes})`;
        }
        text += '\n';
      }
    });
    text += '\n';
  }

  // ASSESSMENT
  if (soapData.assessment?.content) {
    text += 'ASSESSMENT:\n';
    text += '-'.repeat(20) + '\n';
    text += stripHtml(soapData.assessment.content) + '\n\n';
  }

  // PLAN
  if (soapData.plan?.content) {
    text += 'PLAN:\n';
    text += '-'.repeat(20) + '\n';
    text += stripHtml(soapData.plan.content) + '\n\n';
  }

  // Footer
  text += separator + '\n';
  text += 'Generated by PT SOAP Generator\n';
  text += `${new Date().toLocaleString()}\n`;

  return text;
};

/**
 * Copy SOAP note to clipboard
 * @param {Object} soapData - Structured SOAP data
 * @param {Object} sessionInfo - Session metadata
 * @returns {Promise<void>}
 */
export const copyToClipboard = async (soapData, sessionInfo = {}) => {
  try {
    const textContent = exportToText(soapData, sessionInfo);
    await navigator.clipboard.writeText(textContent);
    return { success: true };
  } catch (error) {
    console.error('Clipboard copy failed:', error);
    throw new Error(`Failed to copy to clipboard: ${error.message}`);
  }
};

/**
 * Strip HTML tags from content
 * @param {string} html - HTML content
 * @returns {string} - Plain text
 */
const stripHtml = (html) => {
  if (!html) return '';
  
  // Create a temporary div to parse HTML
  const temp = document.createElement('div');
  temp.innerHTML = html;
  
  // Replace common HTML elements with appropriate formatting
  let text = temp.textContent || temp.innerText || '';
  
  // Clean up extra whitespace
  text = text.replace(/\s+/g, ' ').trim();
  
  return text;
};

/**
 * Get export options for UI
 */
export const getExportOptions = () => [
  {
    key: 'pdf',
    label: 'Export as PDF',
    description: 'Professional PDF document',
    icon: 'Download'
  },
  {
    key: 'copy',
    label: 'Copy to Clipboard',
    description: 'Copy formatted text',
    icon: 'Copy'
  },
  {
    key: 'text',
    label: 'Download as Text',
    description: 'Plain text file',
    icon: 'FileText'
  }
];

// Default export object for easy importing
const exportService = {
  exportToPDF,
  exportToText,
  copyToClipboard,
  getExportOptions
};

export default exportService;
